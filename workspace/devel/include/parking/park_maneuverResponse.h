// Generated by gencpp from file parking/park_maneuverResponse.msg
// DO NOT EDIT!


#ifndef PARKING_MESSAGE_PARK_MANEUVERRESPONSE_H
#define PARKING_MESSAGE_PARK_MANEUVERRESPONSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace parking
{
template <class ContainerAllocator>
struct park_maneuverResponse_
{
  typedef park_maneuverResponse_<ContainerAllocator> Type;

  park_maneuverResponse_()
    : path()
    , input()  {
    }
  park_maneuverResponse_(const ContainerAllocator& _alloc)
    : path(_alloc)
    , input(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _path_type;
  _path_type path;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _input_type;
  _input_type input;





  typedef boost::shared_ptr< ::parking::park_maneuverResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::parking::park_maneuverResponse_<ContainerAllocator> const> ConstPtr;

}; // struct park_maneuverResponse_

typedef ::parking::park_maneuverResponse_<std::allocator<void> > park_maneuverResponse;

typedef boost::shared_ptr< ::parking::park_maneuverResponse > park_maneuverResponsePtr;
typedef boost::shared_ptr< ::parking::park_maneuverResponse const> park_maneuverResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::parking::park_maneuverResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::parking::park_maneuverResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace parking

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::parking::park_maneuverResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::parking::park_maneuverResponse_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::parking::park_maneuverResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::parking::park_maneuverResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::parking::park_maneuverResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::parking::park_maneuverResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::parking::park_maneuverResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "7466c0bf710479ba4de50e5ac3b9ae45";
  }

  static const char* value(const ::parking::park_maneuverResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x7466c0bf710479baULL;
  static const uint64_t static_value2 = 0x4de50e5ac3b9ae45ULL;
};

template<class ContainerAllocator>
struct DataType< ::parking::park_maneuverResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "parking/park_maneuverResponse";
  }

  static const char* value(const ::parking::park_maneuverResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::parking::park_maneuverResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64[] path\n\
float64[] input\n\
";
  }

  static const char* value(const ::parking::park_maneuverResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::parking::park_maneuverResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.path);
      stream.next(m.input);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct park_maneuverResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::parking::park_maneuverResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::parking::park_maneuverResponse_<ContainerAllocator>& v)
  {
    s << indent << "path[]" << std::endl;
    for (size_t i = 0; i < v.path.size(); ++i)
    {
      s << indent << "  path[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.path[i]);
    }
    s << indent << "input[]" << std::endl;
    for (size_t i = 0; i < v.input.size(); ++i)
    {
      s << indent << "  input[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.input[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // PARKING_MESSAGE_PARK_MANEUVERRESPONSE_H
