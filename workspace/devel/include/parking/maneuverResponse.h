// Generated by gencpp from file parking/maneuverResponse.msg
// DO NOT EDIT!


#ifndef PARKING_MESSAGE_MANEUVERRESPONSE_H
#define PARKING_MESSAGE_MANEUVERRESPONSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <parking/car_state.h>
#include <parking/car_input.h>

namespace parking
{
template <class ContainerAllocator>
struct maneuverResponse_
{
  typedef maneuverResponse_<ContainerAllocator> Type;

  maneuverResponse_()
    : succeed(false)
    , path()
    , input()
    , dt()  {
    }
  maneuverResponse_(const ContainerAllocator& _alloc)
    : succeed(false)
    , path(_alloc)
    , input(_alloc)
    , dt(_alloc)  {
  (void)_alloc;
    }



   typedef uint8_t _succeed_type;
  _succeed_type succeed;

   typedef  ::parking::car_state_<ContainerAllocator>  _path_type;
  _path_type path;

   typedef  ::parking::car_input_<ContainerAllocator>  _input_type;
  _input_type input;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _dt_type;
  _dt_type dt;





  typedef boost::shared_ptr< ::parking::maneuverResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::parking::maneuverResponse_<ContainerAllocator> const> ConstPtr;

}; // struct maneuverResponse_

typedef ::parking::maneuverResponse_<std::allocator<void> > maneuverResponse;

typedef boost::shared_ptr< ::parking::maneuverResponse > maneuverResponsePtr;
typedef boost::shared_ptr< ::parking::maneuverResponse const> maneuverResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::parking::maneuverResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::parking::maneuverResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace parking

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'parking': ['/home/xushen/Multi_Car_Parking/workspace/src/parking/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::parking::maneuverResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::parking::maneuverResponse_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::parking::maneuverResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::parking::maneuverResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::parking::maneuverResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::parking::maneuverResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::parking::maneuverResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "50633944400a8fb4ab22c5885e422031";
  }

  static const char* value(const ::parking::maneuverResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x50633944400a8fb4ULL;
  static const uint64_t static_value2 = 0xab22c5885e422031ULL;
};

template<class ContainerAllocator>
struct DataType< ::parking::maneuverResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "parking/maneuverResponse";
  }

  static const char* value(const ::parking::maneuverResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::parking::maneuverResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bool      succeed\n\
car_state path\n\
car_input input\n\
float64[] dt\n\
\n\
================================================================================\n\
MSG: parking/car_state\n\
# The states used in vehicle control\n\
# x, y, heading and speed\n\
float64[] x\n\
float64[] y\n\
float64[] psi\n\
float64[] v\n\
================================================================================\n\
MSG: parking/car_input\n\
# The input used in vehicle control\n\
# Steering angle and acceleration\n\
float64[] delta\n\
float64[] acc\n\
";
  }

  static const char* value(const ::parking::maneuverResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::parking::maneuverResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.succeed);
      stream.next(m.path);
      stream.next(m.input);
      stream.next(m.dt);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct maneuverResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::parking::maneuverResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::parking::maneuverResponse_<ContainerAllocator>& v)
  {
    s << indent << "succeed: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.succeed);
    s << indent << "path: ";
    s << std::endl;
    Printer< ::parking::car_state_<ContainerAllocator> >::stream(s, indent + "  ", v.path);
    s << indent << "input: ";
    s << std::endl;
    Printer< ::parking::car_input_<ContainerAllocator> >::stream(s, indent + "  ", v.input);
    s << indent << "dt[]" << std::endl;
    for (size_t i = 0; i < v.dt.size(); ++i)
    {
      s << indent << "  dt[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.dt[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // PARKING_MESSAGE_MANEUVERRESPONSE_H
